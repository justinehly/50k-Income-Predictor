levels(clean$Income)
clean$Income <- as.factor(case_when(
as.character(clean$Income) %in% c(">50K.", " >50K") ~ ">50K",
as.character(clean$Income) %in% c("<=50K.", " <=50K") ~ "<=50K",
TRUE ~ as.character(clean$Income)
))
# now the Income column is back to 2 levels
# ---- clean workclass --- #
workclassTable <- table(clean$workclass)
t(t(workclassTable))
propt <- t(t(prop.table(workclassTable)))
colnames(propt) <- "workclass proportions"
propt
p <- prop.table(table(clean$workclass, clean$Income))
p
t(aggregate(workclass~Income,data=clean,summary))
summary(clean$workclass)
# Private have the bulk of the entries ~ 70%
# unpaid people make up less than .001%
sum(p[c(1,2,7)])*100 # = 13% # gov workers
# all government workers make up a combined 13% maybe we should combine those???
# self employed combined make up 10% 3% inc, 7% not-inc
# this variable may be useful as well - self employed are favored to make >50k
wc <- glm(Income~workclass, clean, family='binomial')
summary(wc)
confint(wc)
# never worked, without-pay arent stat sig, let's combine them now
clean$workclass <- as.factor(case_when(
as.character(clean$workclass) %in% c("Never-worked", "Without-pay") ~ "Unpaid",
TRUE ~ as.character(clean$workclass)
))
# unpaid still not sig, so lets merge it with unknown
# also looking over proportions table, we can merge the government jobs together
clean$workclass <- as.factor(case_when(
as.character(clean$workclass) %in% c("Unknown", "Unpaid") ~ "Unknown/Unpaid",
as.character(clean$workclass) %in% c("Local-gov", "State-gov", "Federal-gov") ~ "Gov't",
TRUE ~ as.character(clean$workclass)
))
# rerun our tables
workclassTable <- table(clean$workclass)
propt <- t(t(prop.table(workclassTable)))
colnames(propt) <- "workclass proportions"
propt
p <- prop.table(table(clean$workclass, clean$Income))
p
t(aggregate(workclass~Income,data=clean,summary))
wc <- glm(Income~workclass, clean, family='binomial')
summary(wc)
confint(wc)
# this looks a lot better
as.data.frame(table(clean$occupation))
# armed forces with 15 entries is tiny compared to all the rest, let's look at how we can make it more practical
p.occ <- prop.table(table(clean$occupation, clean$Income))
data.frame(format(p.occ, scientific = F))
occ.glm <- glm(Income~occupation, data=clean, family='binomial')
summary(occ.glm)
confint(occ.glm)
# Occupation, reviewing the breakdown of how many observations are within each factor level of occupation, Armed
# Services represents just 15 of the 48,842 observations or 0.03% of the total, essentially giving it very little
# predictive power, but after a logistic regression test we see the pvalue = 0.03 from zvalue, we notice the
# confidence interval (-0.02031461,  2.185816489) crosses zero, so merging it with a similar occupation makes
# sense. Also notable is that Machine-op-inspct has pvalue=0.07 with CI(-0.25527485,  0.009908866).
# AF merge with Protective-serv
# Mach-op-ins merge with Other-Service since they are both primarily in the private sector
clean$occupation <- as.factor(case_when(
as.character(clean$occupation) %in% c("Armed-Forces", "Protective-serv") ~ "ArmForc/ProtSvc",
as.character(clean$occupation) %in% c("Machine-op-inspct", "Other-service") ~ "MachOpIns/OthSvc",
TRUE ~ as.character(clean$occupation)
))
# rerun glm
occ.glm <- glm(Income~occupation, data=clean, family='binomial')
summary(occ.glm)
confint(occ.glm)
# all pvalues look stat sig, no CI cross zero!
clean$marital.status <- as.factor(case_when(
as.character(clean$marital.status) %in% c("Married-AF-spouse",
"Married-civ-spouse") ~ "Married-spouse",
as.character(clean$marital.status) %in% c("Separated", "Married-spouse-absent") ~ "SpsAbs/Separtd",
TRUE ~ as.character(clean$marital.status)))
levels(clean$marital.status)
ms.glm <- glm(Income~marital.status, data=clean, family = "binomial")
summary(ms.glm)
confint(ms.glm)
summary(clean)
attach(clean)
# check out the int variables
clean %>% select_if(is.integer) %>%
ggpairs(ggplot2::aes(color=clean$Income))
# not very good stories here, dont see any dependencies between the numberical values
detatch(clean)
#--- age ---#
t(aggregate(age~Income,data=clean,summary))
# Min Age <=50: 17/ >50: 19
# Mean Age <=50: 37/ >50: 44
# Max Age = 90 for both
# people making >50 tend to be older, about 7yrs on average
ggplot(clean, aes(age, fill= Income)) + geom_bar(position="fill") +
scale_x_continuous(breaks=seq(0,90, by = 10)) +
labs(title="Age by Income") +
theme_classic()
# quite a big of overlap between <=50 and >50 - may not be a good selector
ggplot(clean, aes(age, fill= Income)) + geom_boxplot() +
scale_x_continuous(breaks=seq(0,90, by = 10)) + coord_flip() +
labs(title="Age by Income") +
theme_classic()
# quite a big of overlap between <=50 and >50 - may not be a good selector
ggplot(clean, aes(fnlwgt, fill= Income)) + geom_boxplot() +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
labs(title="FinalWeight by Income",
x ="Final Weight") + theme_classic() +
coord_flip()
# this is a weighting metric, so not surprised that they boxplots are about the same
wgt <- glm(Income~fnlwgt, clean, family="binomial")
summary(wgt)
confint(wgt)
# with p-value = 0.08 we show that this variable is not statistically significant in
# determining Income and a CI that includes 0!
# --- workclass EDA ---#
# summary tables
prop.table(table(clean$workclass))
aggregate(Income~workclass,data=clean,summary)
prop.table(table(clean$workclass, clean$Income))
ggplot(clean, aes(workclass, fill= Income)) +
geom_bar() +
theme_classic() +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
labs(title = "WorkClass by Income")
ggplot(clean, aes(workclass, fill= Income)) +
geom_bar(position="fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
labs(title = "WorkClass by Income")
summary(clean$workclass)
t(aggregate(occupation~workclass,data=clean,summary))
(prop.table(table(clean$workclass, clean$occupation, clean$Income)))
# seems similar to workclass
ggplot(clean, aes(x=workclass, fill= occupation)) +
geom_bar() +
theme_classic() +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
labs(title="Workclass Totals Divided into Occupations")
# just plot occupation totals
ggplot(clean, aes(x=occupation, fill = workclass)) +
geom_bar() +
theme_classic() +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
labs(title="Occupation Totals Broken Out by Workclass")
# pay proportions by occupation
ggplot(clean, aes(x=occupation, fill = Income)) +
geom_bar(position = "fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
labs(title="Pay Proportions by Occupation")
# Exec-managerial, Prof-sepcialty look good for making >50
#--- education ---#
t(aggregate(education~Income,data=clean,summary))
ggplot(clean, aes(education, fill= Income)) + geom_bar(position="fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
labs(title="Education by Income")
# this one favors more educated people to make >50k
#--- education.num---#
t(aggregate(education.num~Income,data=clean,summary))
# this may work better with education.num as a factor, but more education = more $$$
ggplot(clean, aes(education.num, fill= Income)) + geom_bar(position="fill") +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
labs(title="Education Years by Income") + theme_classic()
# somewhat redundant with education, just in a continuous format
ggplot(clean, aes(education.num, fill= education)) + geom_bar(position="fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
labs(title="Education Years broken out by Education Level")
# somewhat redundant with education, just in a continuous format
# we can let the software decide which one works best in modeling
prop.table(table(clean$education.num, clean$education))
t(aggregate(marital.status~Income,data=clean,summary))
# married people have the better chances of earning >50k
ggplot(clean, aes(x=marital.status, fill= Income)) +
geom_bar(position="fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
labs(title="Marital Status by Income")
# Married-AF-spouse (armed forces) and Married-civ-spouse (civilian) have highest potential to make >50k
#--- combining married-AF with married-civ since there are only 23 married-AF
# married people have the better chances of earning >50k
t(aggregate(relationship~Income,data=clean,summary))
ggplot(clean, aes(relationship, fill= Income)) + geom_bar(position="fill") +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
labs(title="Relationship by Income") + theme_classic()
# redunant to marital.status where married people have highest potential to >50
t(aggregate(marital.status~relationship,data=clean,summary))
ggplot(clean, aes(x=relationship, fill= marital.status)) +
geom_bar(stat="count") +
theme_classic() +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
labs(title="Relationship by Marital Status")
t(aggregate(marital.status~sex+Income,data=clean,summary))
ggplot(clean, aes(relationship, fill= Income)) + geom_bar(position="fill") +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
labs(title="Relationship by Income") + theme_classic()
# redunant to marital.status where married people have highest potential to >50
t(aggregate(race~Income,data=clean,summary))
ggplot(clean, aes(race, fill= Income)) + geom_bar(position="fill") +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
labs(title="Race by Income") + theme_classic()
# none of these seems to point to making over 50
t(aggregate(native.country~Income,data=clean,summary))
ggplot(clean, aes(native.country, fill= Income)) + geom_bar(position="fill") +
theme_classic() + theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
labs(title="Native Country by Income")
# quite a few of these pop, may be very useful
ggplot(clean, aes(x= reorder(native.country, -count), fill= Income)) + geom_bar(position="fill") +
theme_classic() + theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
labs(title="Native Country by Income")
ggplot(clean, aes(x= reorder(native.country), fill= Income)) + geom_bar(position="fill") +
theme_classic() + theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
labs(title="Native Country by Income")
ggplot(clean, aes(x= reorder(native.country, -count(native.country)), fill= Income)) +
geom_bar(position="fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
labs(title="Native Country by Income")
gplot(clean, aes(x= native.country, fill= Income)) +
geom_bar(position="fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
labs(title="Native Country by Income")
ggplot(clean, aes(x= native.country, fill= Income)) +
geom_bar(position="fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
labs(title="Native Country by Income")
ggplot(clean, aes(x= native.country, fill= Income)) +
geom_bar() +
theme_classic() +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
labs(title="Native Country by Income")
ggplot(clean, aes(x= native.country, fill= Income)) +
geom_bar(position="fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
labs(title="Native Country by Income")
clean %>% mutate(native.country = forcats::fct_reorder(.f = native.country,
.x = Income,
.fun = function(.x) mean (.x == ">50K"),
.desc = TRUE)) %>%
ggplot(clean, aes(x= native.country, fill= Income)) +
geom_bar(position="fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
labs(title="Native Country by Income")
clean %>% mutate(native.country = forcats::fct_reorder(.f = native.country,
.x = Income,
.fun = function(.x) mean (.x == ">50K"),
.desc = TRUE)) %>%
ggplot(clean, aes(x= native.country, fill= Income)) +
geom_bar(position="fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
labs(title="Native Country by Income")
unique(clean$Income)
clean %>% mutate(native.country = forcats::fct_reorder(.f = native.country,
.x = Income,
.fun = function(.x) mean (.x == ">50K"),
.desc = TRUE)) %>%
ggplot(aes(x= native.country, fill= Income)) +
geom_bar(position="fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
labs(title="Native Country by Income")
clean %>% mutate(native.country = forcats::fct_reorder(.f = native.country,
.x = Income,
.fun = function(.x) mean (.x == ">50K"),
.desc = TRUE)) %>%
ggplot(aes(x= native.country, fill= Income)) +
geom_bar(position="fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
labs(title="Native Country by Income Proportion")
ggplot(clean, aes(race, fill= Income)) + geom_bar(position="fill") +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
labs(title="Race by Income") + theme_classic()
clean %>% mutate(race = forcats::fct_reorder(.f = race,
.x = Income,
.fun = function(.x) mean (.x == ">50K"),
.desc = TRUE)) %>%
ggplot(aes(race, fill= Income)) + geom_bar(position="fill") +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
labs(title="Race by Income") + theme_classic()
t(aggregate(capgain~Income,data=clean,summary))
ggplot(clean, aes(capgain, fill= Income)) + geom_bar(position="fill") +
labs(title="Has Capital Grains by Income") + theme_classic()
#theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0))
# people with capital gains tend to make more than 50
t(aggregate(caploss~Income,data=clean,summary))
ggplot(clean, aes(caploss, fill= Income)) + geom_bar(position="fill") +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
labs(title="Has Campital Loss by Income") + theme_classic()
# people with capital.loss also have tend to make >50
ggplot(clean, aes(capgain, fill= Income)) + geom_bar(position="fill") +
labs(title="Has Capital Gains by Income") + theme_classic()
#theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0))
# people with capital gains tend to make more than 50
t(aggregate(caploss~Income,data=clean,summary))
ggplot(clean, aes(caploss, fill= Income)) + geom_bar(position="fill") +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
labs(title="Has Capital Loss by Income") + theme_classic()
t(aggregate(capgain~Income,data=clean,summary))
prop.table(table(clean$Income~clean$capgain))
prop.table(table(clean$Income,clean$capgain))
prop.table(table(clean$capgain,clean$Income))
prop.table(table(clean$caploss,clean$Income))
prop.table(table(clean$hours.per.week, clean$Income))
ggplot(clean, aes(hours.per.week, fill= Income)) +
geom_bar(position="fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
scale_x_continuous(breaks=seq(0,100, by = 10)) +
labs(title="Hours Per Week by Income",
x = "Hours Worked Per Week")
clean %>% mutate(hours.per.week = forcats::fct_reorder(.f = hours.per.week,
.x = Income,
.fun = function(.x) mean (.x == ">50K"),
.desc = TRUE)) %>%
ggplot(aes(hours.per.week, fill= Income)) +
geom_bar(position="fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
scale_x_continuous(breaks=seq(0,100, by = 10)) +
labs(title="Hours Per Week by Income",
x = "Hours Worked Per Week")
clean %>% mutate(as.factor(hours.per.week)) %>%
mutate(hours.per.week = forcats::fct_reorder(.f = hours.per.week,
.x = Income,
.fun = function(.x) mean (.x == ">50K"),
.desc = TRUE)) %>%
ggplot(aes(hours.per.week, fill= Income)) +
geom_bar(position="fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
scale_x_continuous(breaks=seq(0,100, by = 10)) +
labs(title="Hours Per Week by Income",
x = "Hours Worked Per Week")
clean %>% mutate(hours.per.week = forcats::fct_reorder(.f = as.factor(hours.per.week),
.x = Income,
.fun = function(.x) mean (.x == ">50K"),
.desc = TRUE)) %>%
ggplot(aes(hours.per.week, fill= Income)) +
geom_bar(position="fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
scale_x_continuous(breaks=seq(0,100, by = 10)) +
labs(title="Hours Per Week by Income",
x = "Hours Worked Per Week")
clean %>% mutate(hours.per.week = forcats::fct_reorder(.f = as.factor(hours.per.week),
.x = Income,
.fun = function(.x) mean (.x == ">50K"),
.desc = TRUE)) %>%
ggplot(aes(hours.per.week, fill= Income)) +
geom_bar(position="fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
#scale_x_continuous(breaks=seq(0,100, by = 10)) +
labs(title="Hours Per Week by Income",
x = "Hours Worked Per Week")
clean %>% mutate(hours.per.week = forcats::fct_reorder(.f = as.factor(hours.per.week),
.x = Income,
.fun = function(.x) mean (.x == ">50K"),
.desc = TRUE)) %>%
ggplot(aes(hours.per.week, fill= Income)) +
geom_bar(position="fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
#scale_x_continuous(breaks=seq(0,100, by = 10)) +
labs(title="Hours Per Week by Income",
x = "Hours Worked Per Week") +
coord_flip()
ggplot(aes(hours.per.week, fill= Income)) +
geom_bar(position="fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
scale_x_continuous(breaks=seq(0,100, by = 10)) +
labs(title="Hours Per Week by Income",
x = "Hours Worked Per Week") +
coord_flip()
ggplot(aes(hours.per.week, fill= Income)) +
geom_bar(position="fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
scale_x_continuous(breaks=seq(0,100, by = 10)) +
labs(title="Hours Per Week by Income",
x = "Hours Worked Per Week")
clean %>%
ggplot(aes(hours.per.week, fill= Income)) +
geom_bar(position="fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
scale_x_continuous(breaks=seq(0,100, by = 10)) +
labs(title="Hours Per Week by Income",
x = "Hours Worked Per Week")
clean %>% filter(.x = Income, .fun = function(.x) mean (.x == ">50K")) %>%
ggplot(aes(hours.per.week, fill= Income)) +
geom_bar(position="fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
scale_x_continuous(breaks=seq(0,100, by = 10)) +
labs(title="Hours Per Week by Income",
x = "Hours Worked Per Week")
clean %>% filter(.x = Income, .fun = function(.x) mean (.x == ">50K")) %>%
ggplot(aes(hours.per.week, fill= Income)) +
geom_bar(position="fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
scale_x_continuous(breaks=seq(0,100, by = 10)) +
labs(title="Hours Per Week by Income",
x = "Hours Worked Per Week",
y = "Proportions")
clean %>% filter(.f = hours.per.week,
.x = Income,
.fun = function(.x) mean (.x == ">50K")) %>%
ggplot(aes(hours.per.week, fill= Income)) +
geom_bar(position="fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
scale_x_continuous(breaks=seq(0,100, by = 10)) +
labs(title="Hours Per Week by Income",
x = "Hours Worked Per Week",
y = "Proportions")
clean %>% dplyr::filter(.f = hours.per.week,
.x = Income,
.fun = function(.x) mean (.x == ">50K")) %>%
ggplot(aes(hours.per.week, fill= Income)) +
geom_bar(position="fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
scale_x_continuous(breaks=seq(0,100, by = 10)) +
labs(title="Hours Per Week by Income",
x = "Hours Worked Per Week",
y = "Proportions")
ggplot(clean, aes(x=occupation,y=hours.per.week, fill= Income)) + geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 270, vjust = 0, hjust = 0)) +
scale_y_continuous(breaks=seq(0,100, by = 10)) +
labs(title="Hours Per Week by Income",
x = "Occupation",
y = "Hours/Week")
names(clean)
str(clean)
clean %>% select_at(is.factor) %>% vif(lm(Income~.))
library(car)
clean %>% select_at(is.factor) %>% vif(lm(Income~.))
clean %>% select_if(is.factor) %>% vif(lm(Income~.))
clean %>% select_if(~class(.) == "factor") %>% vif(lm(Income~.))
clean %>% select_if(~class(.) == "factor")
fac.clean <- clean %>% select_if(~class(.) == "factor")
str(fac.clean)
vif(lm(Income~., data=fac.clean))
vif(glm(Income~., data=fac.clean))
vif(glm(Income~., data=fac.clean, family="binomial"))
vif(glm(Income~., data=clean, family="binomial"))
vif(glm(Income~., data=fac.clean, family="binomial"))
fac.clean <- clean %>% select_if(~class(.) == "factor")
vif(glm(Income~., data=fac.clean, family="binomial"))
# looks ok between the categorical variables.
set.seed(123)
smp.size <- floor( (nrow(clean)/3) * 2)
train.ind <- sample(seq_len(nrow(clean)), size=smp.size)
train <- clean[train.ind,]
test <- clean[-train.ind,]
log.mod <- glm(Income~., data=train, family = "binomial")
summary(log.mod)
summary(fac.clean)
fac.clean.glm <- glm(Income~., data=fac.clean, family="binomial")
fac.clean.glm <- glm(Income~., data=fac.clean, family="binomial")
summary(fac.clean.glm)
vif(fac.clean.glm)
mlt.lm <- lm(Income~workclass+occupation, data=clean)
mlt.glm <- glm(Income~workclass+occupation, data=clean)
mlt.glm <- glm(Income~workclass+occupation, data=clean, family = "binomial")
summary(mlt.glm)
vif(mlt.glm)
names(fac.clean)
fac.clean <- fac.clear[,-c(2,4,5,6)]
fac.clean <- fac.clean[,-c(2,4,5,6)]
str(fac.clean)
fac.clean.glm <- glm(Income~, data=fac.clean, family="binomial")
summary(fac.clean.glm)
vif(fac.clean.glm)
fac.clean.glm <- glm(Income~., data=fac.clean, family="binomial")
summary(fac.clean.glm)
vif(fac.clean.glm)
names(clean)
?vif
set.seed(123)
smp.size <- floor( (nrow(clean)/3) * 2)
train.ind <- sample(seq_len(nrow(clean)), size=smp.size)
train <- clean[train.ind,]
test <- clean[-train.ind,]
log.mod <- glm(Income~., data=train, family = "binomial")
summary(log.mod)
prop.table(clean$Income)
prop.table(table(clean$Income))
library(ROSE)
library(rpart)
treeimb <- lm(Income~., data=train)
pred.treeimb <- predict(treeimb, newdata = test)
accuracy.meas(test$Income, pred.treeimb[,2])
treeimb <- glm(Income~., data=train, family = "binomial")
pred.treeimb <- predict(treeimb, newdata = test)
accuracy.meas(test$Income, pred.treeimb[,2])
treeimb <- rpart(Income~., data=train)
pred.treeimb <- predict(treeimb, newdata = test)
accuracy.meas(test$Income, pred.treeimb[,2])
